{
	"patcher" : 	{
		"fileversion" : 1,
		"appversion" : 		{
			"major" : 6,
			"minor" : 0,
			"revision" : 8
		}
,
		"rect" : [ 876.0, 225.0, 753.0, 810.0 ],
		"bgcolor" : [ 0.9, 0.9, 0.9, 1.0 ],
		"bglocked" : 0,
		"openinpresentation" : 0,
		"default_fontsize" : 12.0,
		"default_fontface" : 0,
		"default_fontname" : "Arial",
		"gridonopen" : 0,
		"gridsize" : [ 15.0, 15.0 ],
		"gridsnaponopen" : 0,
		"statusbarvisible" : 2,
		"toolbarvisible" : 1,
		"boxanimatetime" : 200,
		"imprint" : 0,
		"enablehscroll" : 1,
		"enablevscroll" : 1,
		"devicewidth" : 0.0,
		"description" : "",
		"digest" : "",
		"tags" : "",
		"boxes" : [ 			{
				"box" : 				{
					"fontname" : "Arial",
					"fontsize" : 12.0,
					"id" : "obj-1",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 24.0, 16.0, 30.0, 20.0 ],
					"text" : "in 1"
				}

			}
, 			{
				"box" : 				{
					"fontname" : "Arial",
					"fontsize" : 12.0,
					"id" : "obj-2",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 682.0, 16.0, 30.0, 20.0 ],
					"text" : "in 2"
				}

			}
, 			{
				"box" : 				{
					"code" : "tanhXdX(x) \n{ \r\n  //return tanh(sqrt(x))/sqrt(x);\n  a = x*x; \n  // IIRC I got this as Pade-approx for tanh(sqrt(x))/sqrt(x) \n  return ((a + 105)*a + 945) / ((15*a + 420)*a + 945); \n}\r\n\r\nHistory z1(0.), s0(0.), s1(0.), s2(0.), s3(0.);\r\n\r\nParam r(0.);\r\n\r\nf = tan(PI * (in2 * 1./samplerate));\r\n\n// input with half delay, for non-linearities \nih = 0.5 * (in1 + z1); \r\nz1 = in1; \n\n// evaluate the non-linear gains \nt0 = tanhXdX(ih - r * s3); \nt1 = tanhXdX(s0); \nt2 = tanhXdX(s1); \nt3 = tanhXdX(s2); \nt4 = tanhXdX(s3); \n\n// g# the denominators for solutions of individual stages \ng0 = 1 / (1 + f*t1);\r\ng1 = 1 / (1 + f*t2); \ng2 = 1 / (1 + f*t3);\r\ng3 = 1 / (1 + f*t4); \n\n// f# are just factored out of the feedback solution \nf3 = f*t3*g3;\r\nf2 = f*t2*g2*f3;\r\nf1 = f*t1*g1*f2;\r\nf0 = f*t0*g0*f1; \n\n// solve feedback \ny3 = (g3*s3 + f3*g2*s2 + f2*g1*s1 + f1*g0*s0 + f0*in1) / (1 + r*f0); \n\n// then solve the remaining outputs (with the non-linear gains here) \nxx = t0*(in1 - r*y3); \ny0 = t1*g0*(s0 + f*xx); \ny1 = t2*g1*(s1 + f*y0); \ny2 = t3*g2*(s2 + f*y1); \n\n// update state \ns0 += 2*f * (xx - y0); \ns1 += 2*f * (y0 - y1); \ns2 += 2*f * (y1 - y2); \ns3 += 2*f * (y2 - t4*y3); \n\nout1 = y3;\n",
					"fontname" : "Arial",
					"fontsize" : 12.0,
					"id" : "obj-3",
					"maxclass" : "codebox",
					"numinlets" : 2,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 24.0, 45.0, 677.0, 720.0 ]
				}

			}
, 			{
				"box" : 				{
					"fontname" : "Arial",
					"fontsize" : 12.0,
					"id" : "obj-4",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 24.0, 773.0, 37.0, 20.0 ],
					"text" : "out 1"
				}

			}
 ],
		"lines" : [ 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 0 ],
					"disabled" : 0,
					"hidden" : 0,
					"source" : [ "obj-1", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-3", 1 ],
					"disabled" : 0,
					"hidden" : 0,
					"source" : [ "obj-2", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"destination" : [ "obj-4", 0 ],
					"disabled" : 0,
					"hidden" : 0,
					"source" : [ "obj-3", 0 ]
				}

			}
 ]
	}

}
